package cn.com.smer.controller;

import java.util.HashMap;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import cn.com.smer.dao.dto.Projects;
import cn.com.smer.dao.dto.SalaryProjects;
import cn.com.smer.dtoform.ProjectsForm;
import cn.com.smer.service.ProjectsService;
import cn.com.smer.service.SalaryProjectsService;
/*
 * 	工资项目管理
 * 	1.增加工资项目
 * 		2.修改工资项目
 * 		3.删除工资项目
 *		4.查询工资项目
 *		5.设定项目公式：只有计算项目才能设定公式，设定公式时只能参照固定项目和导入项目，具体参见下面数据描述。
 * 
 */
@Controller
@RequestMapping("/projects")
public class ProjectsController {
	@Autowired
	private ProjectsService projectsService;
	@Autowired
	private SalaryProjectsService salaryProjectsService;

	// 添加产品 表单显示
	@RequestMapping(value = "/create", params = { "form" })
	public String createForm() {
		return "/projects/projectsAdd";
	}

	// 新建
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public String create(ProjectsForm form, Model model) {
		System.out.println(form);
		if(form.getProjectType() == 4) {
			if(projectsService.selectByProjectTypeIs() == false) {
				model.addAttribute("AddprojectsResult", "新增工資項目失败，实发项目已存在！！！");
				return "/projects/projectsAdd";
			}
		}
		boolean projectIs = projectsService.selectByProjectName(form.getProjectName());
		if(projectIs == false) {
			model.addAttribute("AddprojectsResult", "新增工資項目失败，项目名称已存在！！！");
			return "/projects/projectsAdd";
		}
		boolean result = projectsService.insertSelective(form);
		Long id = form.getProjectId();
		model.addAttribute("id", id);
		if (result) {
			if (form.getProjectType() == 2 || form.getProjectType() == 3) {
				return "redirect:/calculation/{id}/create?form"; // 重定向到另一个业务控制方法
			} else {
				return "redirect:/projects/create?complete";
			}

		} else {
			model.addAttribute("AddprojectsResult", "新增工資項目失败!");
		}
		return "/projects/projectsAdd";
	}

	// 新建完成
	@RequestMapping(value = "/create", method = RequestMethod.GET, params = { "complete" })
	public String createComplete(Model model) {
		model.addAttribute("AddprojectsResult", "新增工資項目成功!");
		return "/projects/projectsAdd";
	}

	// 查询产品 查询表单显示
	@RequestMapping(value = "/list", params = { "form" })
	public String listForm(Model model) {

		return "/projects/projectsSelect";
	}

	// 列表显示
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public String list(ProjectsForm form, Model model) {
		List<SalaryProjects> salaryProjectsList = salaryProjectsService.selectAll();
		List<Projects> projectsList = projectsService.selectBySelective(form);
		model.addAttribute("projectsList", projectsList);
		model.addAttribute("salaryProjectsList", salaryProjectsList);
		return "/projects/projectsSelect";
	}

	// 修改部门 表单显示
	@RequestMapping(value = "/{id}/update", params = { "form" })
	public String updateForm(Model model, @PathVariable("id") Long projectId) {
		Projects projects = projectsService.selectByPrimaryKey(projectId);
		List<SalaryProjects> salaryProjectsList = salaryProjectsService.selectAll();
		HashMap<Integer, String> addorsubtractMap = new HashMap<Integer, String>();
		addorsubtractMap.put(0, "增加");
		addorsubtractMap.put(1, "减少");
		addorsubtractMap.put(2, "不变");
		model.addAttribute("addorsubtractMap", addorsubtractMap);
		model.addAttribute("projects", projects);
		model.addAttribute("salaryProjectsList", salaryProjectsList);
		return "/projects/projectsUpdate";
	}

	// 更新
	@RequestMapping(value = "/{id}/update", params = { "update" }, method = RequestMethod.POST)
	public String updateForm(ProjectsForm form, Model model, @PathVariable("id") Long projectId) {
		boolean result = projectsService.updateByPrimaryKeySelective(form);
		if (result) {
			return "redirect:/projects/{id}/update?complete";
		} else {
			model.addAttribute("updateProjects", "保存工资项目失败!");
		}
		return "/projects/projectsSelect";
	}

	// 更新成功
	@RequestMapping(value = "/{id}/update", params = { "complete" }, method = RequestMethod.GET)
	public String updateForm(Model model) {
		model.addAttribute("updateProjects", "保存工资项目成功!");
		return "/projects/projectsSelect";
	}

	// 删除产品 删除
	@RequestMapping(value = "/{id}/delete", method = RequestMethod.GET)
	public String delete(Model model, @PathVariable("id") Long projectId) {
		Projects projects = projectsService.selectByPrimaryKey(projectId);
		projects.setRemark("不可用");
		ProjectsForm form = new ProjectsForm();
		BeanUtils.copyProperties(projects, form);
		System.out.println(form);
		boolean result = projectsService.updateByPrimaryKeySelective(form);
		if (result) {
			return "redirect:/projects/{id}/delete?complete";
		} else {
			model.addAttribute("DeleteProjectsResult", "删除产品失败！");
		}
		return "/projects/projectsSelect";
	}

	// 删除产品成功
	@RequestMapping(value = "/{id}/delete", method = RequestMethod.GET, params = { "complete" })
	public String delete(Model model) {
		model.addAttribute("DeleteProjectsResult", "删除产品成功！");
		return "/projects/projectsSelect";
	}
}
